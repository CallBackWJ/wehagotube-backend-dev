module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.7). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateChat {
  count: Int!
}

type AggregateSchedule {
  count: Int!
}

type AggregateTimeLink {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVideo {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Chat {
  id: ID!
  text: String!
  from: User!
  createdAt: DateTime!
  video: Video!
}

type ChatConnection {
  pageInfo: PageInfo!
  edges: [ChatEdge]!
  aggregate: AggregateChat!
}

input ChatCreateInput {
  id: ID
  text: String!
  from: UserCreateOneInput!
  video: VideoCreateOneWithoutChatsInput!
}

input ChatCreateManyWithoutVideoInput {
  create: [ChatCreateWithoutVideoInput!]
  connect: [ChatWhereUniqueInput!]
}

input ChatCreateWithoutVideoInput {
  id: ID
  text: String!
  from: UserCreateOneInput!
}

type ChatEdge {
  node: Chat!
  cursor: String!
}

enum ChatOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChatPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
}

input ChatScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ChatScalarWhereInput!]
  OR: [ChatScalarWhereInput!]
  NOT: [ChatScalarWhereInput!]
}

type ChatSubscriptionPayload {
  mutation: MutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

input ChatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChatWhereInput
  AND: [ChatSubscriptionWhereInput!]
  OR: [ChatSubscriptionWhereInput!]
  NOT: [ChatSubscriptionWhereInput!]
}

input ChatUpdateInput {
  text: String
  from: UserUpdateOneRequiredInput
  video: VideoUpdateOneRequiredWithoutChatsInput
}

input ChatUpdateManyDataInput {
  text: String
}

input ChatUpdateManyMutationInput {
  text: String
}

input ChatUpdateManyWithoutVideoInput {
  create: [ChatCreateWithoutVideoInput!]
  delete: [ChatWhereUniqueInput!]
  connect: [ChatWhereUniqueInput!]
  set: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutVideoInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutVideoInput!]
  deleteMany: [ChatScalarWhereInput!]
  updateMany: [ChatUpdateManyWithWhereNestedInput!]
}

input ChatUpdateManyWithWhereNestedInput {
  where: ChatScalarWhereInput!
  data: ChatUpdateManyDataInput!
}

input ChatUpdateWithoutVideoDataInput {
  text: String
  from: UserUpdateOneRequiredInput
}

input ChatUpdateWithWhereUniqueWithoutVideoInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateWithoutVideoDataInput!
}

input ChatUpsertWithWhereUniqueWithoutVideoInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateWithoutVideoDataInput!
  create: ChatCreateWithoutVideoInput!
}

input ChatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  from: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  video: VideoWhereInput
  AND: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
}

input ChatWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createChat(data: ChatCreateInput!): Chat!
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  updateManyChats(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): BatchPayload!
  upsertChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  deleteChat(where: ChatWhereUniqueInput!): Chat
  deleteManyChats(where: ChatWhereInput): BatchPayload!
  createSchedule(data: ScheduleCreateInput!): Schedule!
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule
  updateManySchedules(data: ScheduleUpdateManyMutationInput!, where: ScheduleWhereInput): BatchPayload!
  upsertSchedule(where: ScheduleWhereUniqueInput!, create: ScheduleCreateInput!, update: ScheduleUpdateInput!): Schedule!
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteManySchedules(where: ScheduleWhereInput): BatchPayload!
  createTimeLink(data: TimeLinkCreateInput!): TimeLink!
  updateTimeLink(data: TimeLinkUpdateInput!, where: TimeLinkWhereUniqueInput!): TimeLink
  updateManyTimeLinks(data: TimeLinkUpdateManyMutationInput!, where: TimeLinkWhereInput): BatchPayload!
  upsertTimeLink(where: TimeLinkWhereUniqueInput!, create: TimeLinkCreateInput!, update: TimeLinkUpdateInput!): TimeLink!
  deleteTimeLink(where: TimeLinkWhereUniqueInput!): TimeLink
  deleteManyTimeLinks(where: TimeLinkWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVideo(data: VideoCreateInput!): Video!
  updateVideo(data: VideoUpdateInput!, where: VideoWhereUniqueInput!): Video
  updateManyVideos(data: VideoUpdateManyMutationInput!, where: VideoWhereInput): BatchPayload!
  upsertVideo(where: VideoWhereUniqueInput!, create: VideoCreateInput!, update: VideoUpdateInput!): Video!
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteManyVideos(where: VideoWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  chat(where: ChatWhereUniqueInput!): Chat
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat]!
  chatsConnection(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatConnection!
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule]!
  schedulesConnection(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScheduleConnection!
  timeLink(where: TimeLinkWhereUniqueInput!): TimeLink
  timeLinks(where: TimeLinkWhereInput, orderBy: TimeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeLink]!
  timeLinksConnection(where: TimeLinkWhereInput, orderBy: TimeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeLinkConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  video(where: VideoWhereUniqueInput!): Video
  videos(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video]!
  videosConnection(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoConnection!
  node(id: ID!): Node
}

type Schedule {
  id: ID!
  title: String!
  desc: String!
  startTime: DateTime!
  endTime: DateTime!
  status: Status!
}

type ScheduleConnection {
  pageInfo: PageInfo!
  edges: [ScheduleEdge]!
  aggregate: AggregateSchedule!
}

input ScheduleCreateInput {
  id: ID
  title: String!
  desc: String!
  startTime: DateTime!
  endTime: DateTime!
  status: Status
}

input ScheduleCreateOneInput {
  create: ScheduleCreateInput
  connect: ScheduleWhereUniqueInput
}

type ScheduleEdge {
  node: Schedule!
  cursor: String!
}

enum ScheduleOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  desc_ASC
  desc_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  status_ASC
  status_DESC
}

type SchedulePreviousValues {
  id: ID!
  title: String!
  desc: String!
  startTime: DateTime!
  endTime: DateTime!
  status: Status!
}

type ScheduleSubscriptionPayload {
  mutation: MutationType!
  node: Schedule
  updatedFields: [String!]
  previousValues: SchedulePreviousValues
}

input ScheduleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ScheduleWhereInput
  AND: [ScheduleSubscriptionWhereInput!]
  OR: [ScheduleSubscriptionWhereInput!]
  NOT: [ScheduleSubscriptionWhereInput!]
}

input ScheduleUpdateDataInput {
  title: String
  desc: String
  startTime: DateTime
  endTime: DateTime
  status: Status
}

input ScheduleUpdateInput {
  title: String
  desc: String
  startTime: DateTime
  endTime: DateTime
  status: Status
}

input ScheduleUpdateManyMutationInput {
  title: String
  desc: String
  startTime: DateTime
  endTime: DateTime
  status: Status
}

input ScheduleUpdateOneRequiredInput {
  create: ScheduleCreateInput
  update: ScheduleUpdateDataInput
  upsert: ScheduleUpsertNestedInput
  connect: ScheduleWhereUniqueInput
}

input ScheduleUpsertNestedInput {
  update: ScheduleUpdateDataInput!
  create: ScheduleCreateInput!
}

input ScheduleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  AND: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  NOT: [ScheduleWhereInput!]
}

input ScheduleWhereUniqueInput {
  id: ID
}

enum Status {
  RESERVED
  READY
  LIVE
  COMPLETED
  PUBLISHED
}

type Subscription {
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
  schedule(where: ScheduleSubscriptionWhereInput): ScheduleSubscriptionPayload
  timeLink(where: TimeLinkSubscriptionWhereInput): TimeLinkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  video(where: VideoSubscriptionWhereInput): VideoSubscriptionPayload
}

type TimeLink {
  id: ID!
  seek: Int!
  desc: String!
  video: Video!
}

type TimeLinkConnection {
  pageInfo: PageInfo!
  edges: [TimeLinkEdge]!
  aggregate: AggregateTimeLink!
}

input TimeLinkCreateInput {
  id: ID
  seek: Int!
  desc: String!
  video: VideoCreateOneWithoutTimeLinksInput!
}

input TimeLinkCreateManyWithoutVideoInput {
  create: [TimeLinkCreateWithoutVideoInput!]
  connect: [TimeLinkWhereUniqueInput!]
}

input TimeLinkCreateWithoutVideoInput {
  id: ID
  seek: Int!
  desc: String!
}

type TimeLinkEdge {
  node: TimeLink!
  cursor: String!
}

enum TimeLinkOrderByInput {
  id_ASC
  id_DESC
  seek_ASC
  seek_DESC
  desc_ASC
  desc_DESC
}

type TimeLinkPreviousValues {
  id: ID!
  seek: Int!
  desc: String!
}

input TimeLinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  seek: Int
  seek_not: Int
  seek_in: [Int!]
  seek_not_in: [Int!]
  seek_lt: Int
  seek_lte: Int
  seek_gt: Int
  seek_gte: Int
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [TimeLinkScalarWhereInput!]
  OR: [TimeLinkScalarWhereInput!]
  NOT: [TimeLinkScalarWhereInput!]
}

type TimeLinkSubscriptionPayload {
  mutation: MutationType!
  node: TimeLink
  updatedFields: [String!]
  previousValues: TimeLinkPreviousValues
}

input TimeLinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TimeLinkWhereInput
  AND: [TimeLinkSubscriptionWhereInput!]
  OR: [TimeLinkSubscriptionWhereInput!]
  NOT: [TimeLinkSubscriptionWhereInput!]
}

input TimeLinkUpdateInput {
  seek: Int
  desc: String
  video: VideoUpdateOneRequiredWithoutTimeLinksInput
}

input TimeLinkUpdateManyDataInput {
  seek: Int
  desc: String
}

input TimeLinkUpdateManyMutationInput {
  seek: Int
  desc: String
}

input TimeLinkUpdateManyWithoutVideoInput {
  create: [TimeLinkCreateWithoutVideoInput!]
  delete: [TimeLinkWhereUniqueInput!]
  connect: [TimeLinkWhereUniqueInput!]
  set: [TimeLinkWhereUniqueInput!]
  disconnect: [TimeLinkWhereUniqueInput!]
  update: [TimeLinkUpdateWithWhereUniqueWithoutVideoInput!]
  upsert: [TimeLinkUpsertWithWhereUniqueWithoutVideoInput!]
  deleteMany: [TimeLinkScalarWhereInput!]
  updateMany: [TimeLinkUpdateManyWithWhereNestedInput!]
}

input TimeLinkUpdateManyWithWhereNestedInput {
  where: TimeLinkScalarWhereInput!
  data: TimeLinkUpdateManyDataInput!
}

input TimeLinkUpdateWithoutVideoDataInput {
  seek: Int
  desc: String
}

input TimeLinkUpdateWithWhereUniqueWithoutVideoInput {
  where: TimeLinkWhereUniqueInput!
  data: TimeLinkUpdateWithoutVideoDataInput!
}

input TimeLinkUpsertWithWhereUniqueWithoutVideoInput {
  where: TimeLinkWhereUniqueInput!
  update: TimeLinkUpdateWithoutVideoDataInput!
  create: TimeLinkCreateWithoutVideoInput!
}

input TimeLinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  seek: Int
  seek_not: Int
  seek_in: [Int!]
  seek_not_in: [Int!]
  seek_lt: Int
  seek_lte: Int
  seek_gt: Int
  seek_gte: Int
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  video: VideoWhereInput
  AND: [TimeLinkWhereInput!]
  OR: [TimeLinkWhereInput!]
  NOT: [TimeLinkWhereInput!]
}

input TimeLinkWhereUniqueInput {
  id: ID
}

enum TYPE {
  ADMIN
  USER
}

type User {
  id: ID!
  email: String!
  name: String!
  avatar: String
  accessToken: String
  refreshToken: String
  permission: TYPE!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  avatar: String
  accessToken: String
  refreshToken: String
  permission: TYPE!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  avatar_ASC
  avatar_DESC
  accessToken_ASC
  accessToken_DESC
  refreshToken_ASC
  refreshToken_DESC
  permission_ASC
  permission_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
  avatar: String
  accessToken: String
  refreshToken: String
  permission: TYPE!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  name: String
  avatar: String
  accessToken: String
  refreshToken: String
  permission: TYPE
}

input UserUpdateInput {
  email: String
  name: String
  avatar: String
  accessToken: String
  refreshToken: String
  permission: TYPE
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  avatar: String
  accessToken: String
  refreshToken: String
  permission: TYPE
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  accessToken: String
  accessToken_not: String
  accessToken_in: [String!]
  accessToken_not_in: [String!]
  accessToken_lt: String
  accessToken_lte: String
  accessToken_gt: String
  accessToken_gte: String
  accessToken_contains: String
  accessToken_not_contains: String
  accessToken_starts_with: String
  accessToken_not_starts_with: String
  accessToken_ends_with: String
  accessToken_not_ends_with: String
  refreshToken: String
  refreshToken_not: String
  refreshToken_in: [String!]
  refreshToken_not_in: [String!]
  refreshToken_lt: String
  refreshToken_lte: String
  refreshToken_gt: String
  refreshToken_gte: String
  refreshToken_contains: String
  refreshToken_not_contains: String
  refreshToken_starts_with: String
  refreshToken_not_starts_with: String
  refreshToken_ends_with: String
  refreshToken_not_ends_with: String
  permission: TYPE
  permission_not: TYPE
  permission_in: [TYPE!]
  permission_not_in: [TYPE!]
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Video {
  id: ID!
  youtubeId: String!
  viewCount: Int!
  createdAt: DateTime!
  thumbnail: String
  schedule: Schedule!
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat!]
  timeLinks(where: TimeLinkWhereInput, orderBy: TimeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeLink!]
}

type VideoConnection {
  pageInfo: PageInfo!
  edges: [VideoEdge]!
  aggregate: AggregateVideo!
}

input VideoCreateInput {
  id: ID
  youtubeId: String!
  viewCount: Int
  thumbnail: String
  schedule: ScheduleCreateOneInput!
  chats: ChatCreateManyWithoutVideoInput
  timeLinks: TimeLinkCreateManyWithoutVideoInput
}

input VideoCreateOneWithoutChatsInput {
  create: VideoCreateWithoutChatsInput
  connect: VideoWhereUniqueInput
}

input VideoCreateOneWithoutTimeLinksInput {
  create: VideoCreateWithoutTimeLinksInput
  connect: VideoWhereUniqueInput
}

input VideoCreateWithoutChatsInput {
  id: ID
  youtubeId: String!
  viewCount: Int
  thumbnail: String
  schedule: ScheduleCreateOneInput!
  timeLinks: TimeLinkCreateManyWithoutVideoInput
}

input VideoCreateWithoutTimeLinksInput {
  id: ID
  youtubeId: String!
  viewCount: Int
  thumbnail: String
  schedule: ScheduleCreateOneInput!
  chats: ChatCreateManyWithoutVideoInput
}

type VideoEdge {
  node: Video!
  cursor: String!
}

enum VideoOrderByInput {
  id_ASC
  id_DESC
  youtubeId_ASC
  youtubeId_DESC
  viewCount_ASC
  viewCount_DESC
  createdAt_ASC
  createdAt_DESC
  thumbnail_ASC
  thumbnail_DESC
}

type VideoPreviousValues {
  id: ID!
  youtubeId: String!
  viewCount: Int!
  createdAt: DateTime!
  thumbnail: String
}

type VideoSubscriptionPayload {
  mutation: MutationType!
  node: Video
  updatedFields: [String!]
  previousValues: VideoPreviousValues
}

input VideoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VideoWhereInput
  AND: [VideoSubscriptionWhereInput!]
  OR: [VideoSubscriptionWhereInput!]
  NOT: [VideoSubscriptionWhereInput!]
}

input VideoUpdateInput {
  youtubeId: String
  viewCount: Int
  thumbnail: String
  schedule: ScheduleUpdateOneRequiredInput
  chats: ChatUpdateManyWithoutVideoInput
  timeLinks: TimeLinkUpdateManyWithoutVideoInput
}

input VideoUpdateManyMutationInput {
  youtubeId: String
  viewCount: Int
  thumbnail: String
}

input VideoUpdateOneRequiredWithoutChatsInput {
  create: VideoCreateWithoutChatsInput
  update: VideoUpdateWithoutChatsDataInput
  upsert: VideoUpsertWithoutChatsInput
  connect: VideoWhereUniqueInput
}

input VideoUpdateOneRequiredWithoutTimeLinksInput {
  create: VideoCreateWithoutTimeLinksInput
  update: VideoUpdateWithoutTimeLinksDataInput
  upsert: VideoUpsertWithoutTimeLinksInput
  connect: VideoWhereUniqueInput
}

input VideoUpdateWithoutChatsDataInput {
  youtubeId: String
  viewCount: Int
  thumbnail: String
  schedule: ScheduleUpdateOneRequiredInput
  timeLinks: TimeLinkUpdateManyWithoutVideoInput
}

input VideoUpdateWithoutTimeLinksDataInput {
  youtubeId: String
  viewCount: Int
  thumbnail: String
  schedule: ScheduleUpdateOneRequiredInput
  chats: ChatUpdateManyWithoutVideoInput
}

input VideoUpsertWithoutChatsInput {
  update: VideoUpdateWithoutChatsDataInput!
  create: VideoCreateWithoutChatsInput!
}

input VideoUpsertWithoutTimeLinksInput {
  update: VideoUpdateWithoutTimeLinksDataInput!
  create: VideoCreateWithoutTimeLinksInput!
}

input VideoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  youtubeId: String
  youtubeId_not: String
  youtubeId_in: [String!]
  youtubeId_not_in: [String!]
  youtubeId_lt: String
  youtubeId_lte: String
  youtubeId_gt: String
  youtubeId_gte: String
  youtubeId_contains: String
  youtubeId_not_contains: String
  youtubeId_starts_with: String
  youtubeId_not_starts_with: String
  youtubeId_ends_with: String
  youtubeId_not_ends_with: String
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  thumbnail: String
  thumbnail_not: String
  thumbnail_in: [String!]
  thumbnail_not_in: [String!]
  thumbnail_lt: String
  thumbnail_lte: String
  thumbnail_gt: String
  thumbnail_gte: String
  thumbnail_contains: String
  thumbnail_not_contains: String
  thumbnail_starts_with: String
  thumbnail_not_starts_with: String
  thumbnail_ends_with: String
  thumbnail_not_ends_with: String
  schedule: ScheduleWhereInput
  chats_every: ChatWhereInput
  chats_some: ChatWhereInput
  chats_none: ChatWhereInput
  timeLinks_every: TimeLinkWhereInput
  timeLinks_some: TimeLinkWhereInput
  timeLinks_none: TimeLinkWhereInput
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
}

input VideoWhereUniqueInput {
  id: ID
  youtubeId: String
}
`
      }
    